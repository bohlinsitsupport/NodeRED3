[
    {
        "id": "620a50846b14ee86",
        "type": "tab",
        "label": "Init variabler",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a8a685f51f8eb6c7",
        "type": "nordpool-api-plus",
        "z": "620a50846b14ee86",
        "name": "Sommartid",
        "area": "SE3",
        "currency": "SEK",
        "action": "rolling",
        "x": 650,
        "y": 340,
        "wires": [
            [
                "46eb0a0e535c1cf2",
                "933e371b96c85d88",
                "0d052d9999cd5b36"
            ]
        ]
    },
    {
        "id": "0d052d9999cd5b36",
        "type": "function",
        "z": "620a50846b14ee86",
        "name": "init prisTak",
        "func": "// Används av funktioner som stänger av stora förbrukare vid för högt pris\n\nglobal.set(\"prisTak\", 3000); // 3 kr/kWh\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "02b3e128bbec7922",
        "type": "debug",
        "z": "620a50846b14ee86",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 560,
        "wires": []
    },
    {
        "id": "c8c78d8b3d45a179",
        "type": "function",
        "z": "620a50846b14ee86",
        "name": "Get Hour",
        "func": "function gethour() {\n var date = new Date();\n var hour = (\"0\"+date.getHours()).substr(-2);\n return hour;\n}\n\nvar hour = gethour();\n\nreturn { payload : hour };",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 140,
        "wires": [
            [
                "14d8db218bfd6bd4"
            ]
        ]
    },
    {
        "id": "14d8db218bfd6bd4",
        "type": "rbe",
        "z": "620a50846b14ee86",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 390,
        "y": 60,
        "wires": [
            [
                "ec08be5470c913f1"
            ]
        ]
    },
    {
        "id": "982abd090d170211",
        "type": "inject",
        "z": "620a50846b14ee86",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 60,
        "wires": [
            [
                "c8c78d8b3d45a179"
            ]
        ]
    },
    {
        "id": "ec08be5470c913f1",
        "type": "function",
        "z": "620a50846b14ee86",
        "name": "Sommar eller vintertid?",
        "func": "// Check if diff UTC is 2 hours = summertime\n// Check if diff UTC is 1 hour = wintertime\n\nlet CET = msg.payload;\n\n// Ger ISO tid\nlet UTCtid = new Date();\nUTCtid.setMinutes(0, 0, 0);\nUTCtid = UTCtid.toISOString();\n\nUTCtid = UTCtid.substring(0, UTCtid.indexOf(':'));\nUTCtid = UTCtid.split('T')[1]\n\n//node.warn(`UTCtid är ${JSON.stringify(UTCtid)} och CET är = ${JSON.stringify(CET)}`);\n\n// Jämför med timestamp (CET)\n\nif (CET-1 == UTCtid) {\n    msg.payload = \"vintertid\"\n}\nelse \n{\n    msg.payload = \"sommartid\"\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 140,
        "wires": [
            [
                "d7c98c1646ac0a62"
            ]
        ]
    },
    {
        "id": "d7c98c1646ac0a62",
        "type": "switch",
        "z": "620a50846b14ee86",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "sommartid",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "vintertid",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 110,
        "y": 400,
        "wires": [
            [
                "9cae0b5c94bc4b06"
            ],
            [
                "65e820e352e1312e"
            ]
        ]
    },
    {
        "id": "9cae0b5c94bc4b06",
        "type": "function",
        "z": "620a50846b14ee86",
        "name": "Get Hour",
        "func": "function gethour() {\n var date = new Date();\n var hour = (\"0\"+date.getHours()).substr(-2);\n return hour;\n}\n\nvar hour = gethour();\n\nreturn { payload : hour };",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 360,
        "wires": [
            [
                "7b2447c196bf4e2b",
                "6f37ea98fe4f6235"
            ]
        ]
    },
    {
        "id": "65e820e352e1312e",
        "type": "function",
        "z": "620a50846b14ee86",
        "name": "Get Hour",
        "func": "function gethour() {\n var date = new Date();\n var hour = (\"0\"+date.getHours()).substr(-2);\n return hour;\n}\n\nvar hour = gethour();\n\nreturn { payload : hour };",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 440,
        "wires": [
            [
                "cc81b336fae7749f",
                "cad3195b5e0578b0"
            ]
        ]
    },
    {
        "id": "6f37ea98fe4f6235",
        "type": "switch",
        "z": "620a50846b14ee86",
        "name": "Sommartid",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "17",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 450,
        "y": 360,
        "wires": [
            [
                "a8a685f51f8eb6c7"
            ]
        ]
    },
    {
        "id": "b714d55e7d356b79",
        "type": "nordpool-api-plus",
        "z": "620a50846b14ee86",
        "name": "Vintertid",
        "area": "SE3",
        "currency": "SEK",
        "action": "rolling",
        "x": 640,
        "y": 460,
        "wires": [
            [
                "64156a45f1df8d69",
                "02b3e128bbec7922",
                "0d052d9999cd5b36"
            ]
        ]
    },
    {
        "id": "71f6ae2585f6cc17",
        "type": "function",
        "z": "620a50846b14ee86",
        "name": "sort array",
        "func": "let Nordpool = msg.payload;\n\nNordpool.sort((a, b) => a.price - b.price); // sort funkar\n\nglobal.set(\"NordpoolTrimmed\", Nordpool);\n\nmsg.payload = Nordpool;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "46eb0a0e535c1cf2",
        "type": "function",
        "z": "620a50846b14ee86",
        "name": "init nordpool",
        "func": "// 1. Klipp ut så endast relevanta timmar: kl 15:00 nuvarande dag till\n// 14:00 nästa dag\n// 2. Sortera på pris.\n\n// Code added here will be run once\n// whenever the node is started.\n// Ta bort alla timmar som är före 15:00 idag och efter 15:00 imorgon\n\nlet Nordpool = msg.payload;\n\nlet idag = new Date();\n\nlet imorrn = new Date();\n\n// add a day\nimorrn.setDate(idag.getDate() + 1);\n\nidag = idag.toISOString();\n\nimorrn = imorrn.toISOString();\n\nidag = idag.split(\"T\", 1)[0];\nimorrn = imorrn.split(\"T\", 1)[0];\n\n// First initialize the Nordpool variable with default values\n// If we get not price from Nordpool, e.g. their service is down\n// We want to set night hours as the cheapest\n\nlet NordpoolTrimmed;\n\nNordpoolTrimmed = \n[{ timestamp: `${idag}T15`, price: 1 },\n{ timestamp: `${idag}T16`, price: 1 },\n{ timestamp: `${idag}T17`, price: 1 },\n{ timestamp: `${idag}T18`, price: 1 },\n{ timestamp: `${idag}T19`, price: 1 },\n{ timestamp: `${idag}T20`, price: 1 },\n{ timestamp: `${idag}T21`, price: 1 },\n{ timestamp: `${idag}T22`, price: 0 },\n{ timestamp: `${idag}T23`, price: 0 },\n{ timestamp: `${imorrn}T00`, price: 0 },\n{ timestamp: `${imorrn}T01`, price: 0 },\n{ timestamp: `${imorrn}T02`, price: 0 },\n{ timestamp: `${imorrn}T03`, price: 1 },\n{ timestamp: `${imorrn}T04`, price: 1 },\n{ timestamp: `${imorrn}T05`, price: 1 },\n{ timestamp: `${imorrn}T06`, price: 1 },\n{ timestamp: `${imorrn}T07`, price: 1 },\n{ timestamp: `${imorrn}T08`, price: 1 },\n{ timestamp: `${imorrn}T09`, price: 1 },\n{ timestamp: `${imorrn}T10`, price: 1 },\n{ timestamp: `${imorrn}T11`, price: 1 },\n{ timestamp: `${imorrn}T12`, price: 1 },\n{ timestamp: `${imorrn}T13`, price: 1 },\n{ timestamp: `${imorrn}T14`, price: 1 }];\n\nfor (let i = 0; i < Nordpool.length; i++) {\n    Nordpool[i].timestamp = Nordpool[i].timestamp.substring(0, Nordpool[i].timestamp.indexOf(':'));\n}\n\n// No need to change values above if we don't get the price from Nordpool\nif (msg.payload !== null) {\n    // sätt price till värdet i Nordpool för samma timestamp\n    \n    for (let i = 0; i < Nordpool.length; i++) {\n        for (let j = 0; j < NordpoolTrimmed.length; j++) {\n            if (Nordpool[i].timestamp === NordpoolTrimmed[j].timestamp) {\n                NordpoolTrimmed[j].price = Nordpool[i].price;\n                // break;\n            }\n        }\n    }\n\n}\n\nmsg.payload = NordpoolTrimmed;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 340,
        "wires": [
            [
                "71f6ae2585f6cc17"
            ]
        ]
    },
    {
        "id": "64156a45f1df8d69",
        "type": "function",
        "z": "620a50846b14ee86",
        "name": "init nordpool",
        "func": "// 1. Klipp ut så endast relevanta timmar: kl 15:00 nuvarande dag till\n// 14:00 nästa dag\n// 2. Sortera på pris.\n\n// Code added here will be run once\n// whenever the node is started.\n// Ta bort alla timmar som är före 15:00 idag och efter 15:00 imorgon\n\nlet Nordpool = msg.payload;\n\nlet idag = new Date();\n\nlet imorrn = new Date();\n\n// add a day\nimorrn.setDate(idag.getDate() + 1);\n\nidag = idag.toISOString();\n\nimorrn = imorrn.toISOString();\n\nidag = idag.split(\"T\", 1)[0];\nimorrn = imorrn.split(\"T\", 1)[0];\n\n// First initialize the Nordpool variable with default values\n// If we get not price from Nordpool, e.g. their service is down\n// We want to set night hours as the cheapest\n\nlet NordpoolTrimmed;\n\nNordpoolTrimmed = \n[{ timestamp: `${idag}T15`, price: 1 },\n{ timestamp: `${idag}T16`, price: 1 },\n{ timestamp: `${idag}T17`, price: 1 },\n{ timestamp: `${idag}T18`, price: 1 },\n{ timestamp: `${idag}T19`, price: 1 },\n{ timestamp: `${idag}T20`, price: 1 },\n{ timestamp: `${idag}T21`, price: 1 },\n{ timestamp: `${idag}T22`, price: 0 },\n{ timestamp: `${idag}T23`, price: 0 },\n{ timestamp: `${imorrn}T00`, price: 0 },\n{ timestamp: `${imorrn}T01`, price: 0 },\n{ timestamp: `${imorrn}T02`, price: 0 },\n{ timestamp: `${imorrn}T03`, price: 1 },\n{ timestamp: `${imorrn}T04`, price: 1 },\n{ timestamp: `${imorrn}T05`, price: 1 },\n{ timestamp: `${imorrn}T06`, price: 1 },\n{ timestamp: `${imorrn}T07`, price: 1 },\n{ timestamp: `${imorrn}T08`, price: 1 },\n{ timestamp: `${imorrn}T09`, price: 1 },\n{ timestamp: `${imorrn}T10`, price: 1 },\n{ timestamp: `${imorrn}T11`, price: 1 },\n{ timestamp: `${imorrn}T12`, price: 1 },\n{ timestamp: `${imorrn}T13`, price: 1 },\n{ timestamp: `${imorrn}T14`, price: 1 }];\n\nfor (let i = 0; i < Nordpool.length; i++) {\n    Nordpool[i].timestamp = Nordpool[i].timestamp.substring(0, Nordpool[i].timestamp.indexOf(':'));\n}\n\n// No need to change values above if we don't get the price from Nordpool\nif (msg.payload !== null) {\n    // sätt price till värdet i Nordpool för samma timestamp\n    \n    for (let i = 0; i < Nordpool.length; i++) {\n        for (let j = 0; j < NordpoolTrimmed.length; j++) {\n            if (Nordpool[i].timestamp === NordpoolTrimmed[j].timestamp) {\n                NordpoolTrimmed[j].price = Nordpool[i].price;\n                // break;\n            }\n        }\n    }\n\n}\n\nmsg.payload = NordpoolTrimmed;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 460,
        "wires": [
            [
                "e427d6937a6826d6"
            ]
        ]
    },
    {
        "id": "e427d6937a6826d6",
        "type": "function",
        "z": "620a50846b14ee86",
        "name": "sort array",
        "func": "let Nordpool = msg.payload;\n\nNordpool.sort((a, b) => a.price - b.price); // sort funkar\n\nglobal.set(\"NordpoolTrimmed\", Nordpool);\n\nmsg.payload = Nordpool;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "933e371b96c85d88",
        "type": "debug",
        "z": "620a50846b14ee86",
        "name": "debug 14",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 240,
        "wires": []
    },
    {
        "id": "7b2447c196bf4e2b",
        "type": "debug",
        "z": "620a50846b14ee86",
        "name": "debug 15",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 300,
        "wires": []
    },
    {
        "id": "cc81b336fae7749f",
        "type": "debug",
        "z": "620a50846b14ee86",
        "name": "debug 16",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 500,
        "wires": []
    },
    {
        "id": "cad3195b5e0578b0",
        "type": "switch",
        "z": "620a50846b14ee86",
        "name": "Vintertid",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "16",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 440,
        "y": 440,
        "wires": [
            [
                "b714d55e7d356b79"
            ]
        ]
    }
]