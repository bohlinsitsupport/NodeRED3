[
    {
        "id": "d91b112b5683cc21",
        "type": "tab",
        "label": "NodeRED Repo",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f0c4095f3bf81241",
        "type": "switch",
        "z": "d91b112b5683cc21",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 790,
        "y": 3520,
        "wires": [
            [
                "e0e969974e892469"
            ],
            [
                "ee69b9934ff02f1b"
            ]
        ]
    },
    {
        "id": "56cf3e508abdae6f",
        "type": "function",
        "z": "d91b112b5683cc21",
        "name": "Är i de sex billigaste timmarna",
        "func": "// få nutid\n\nlet nu = new Date();\n\nnu.setMinutes(0, 0, 0);\n\nnu = nu.toISOString();\n\n\n\n// kolla om nu är i VV_bered\n\nconst VV_bered = global.get(\"VV_bered\");\n\nlet starta = false;\n\n// console.log(VV_bered.length);\n\nfor (let i = 0; i < VV_bered.length; i++) {\n    // console.log(i);\n    if (VV_bered[i].timestamp === nu) {\n        console.log(\"match\");\n        console.log(\"nu: \", nu);\n        starta = true;\n    }\n}\n\n\nmsg.payload = starta;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 3440,
        "wires": [
            [
                "f0c4095f3bf81241"
            ]
        ]
    },
    {
        "id": "e0e969974e892469",
        "type": "http request",
        "z": "d91b112b5683cc21",
        "name": "VV-beredare PÅ",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://192.168.1.253/relay/0?turn=on",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1000,
        "y": 3460,
        "wires": [
            []
        ]
    },
    {
        "id": "ee69b9934ff02f1b",
        "type": "http request",
        "z": "d91b112b5683cc21",
        "name": "VV-beredare AV",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://192.168.1.253/relay/0?turn=off",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1000,
        "y": 3580,
        "wires": [
            []
        ]
    },
    {
        "id": "8183d8ac.01c1e",
        "type": "rbe",
        "z": "d91b112b5683cc21",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 370,
        "y": 3520,
        "wires": [
            [
                "56cf3e508abdae6f"
            ]
        ]
    },
    {
        "id": "d9dc9f17.84ef68",
        "type": "function",
        "z": "d91b112b5683cc21",
        "name": "Get Hour",
        "func": "function gethour() {\n var date = new Date();\n var hour = (\"0\"+date.getHours()).substr(-2);\n return hour;\n}\n\nvar hour = gethour();\n\nreturn { payload : hour };",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 3440,
        "wires": [
            [
                "8183d8ac.01c1e"
            ]
        ]
    },
    {
        "id": "7e4cd656.31676",
        "type": "inject",
        "z": "d91b112b5683cc21",
        "d": true,
        "name": "Every 10 Seconds",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 3360,
        "wires": [
            [
                "d9dc9f17.84ef68"
            ]
        ]
    },
    {
        "id": "36469fecf68a05b4",
        "type": "inject",
        "z": "d91b112b5683cc21",
        "d": true,
        "name": "Ladda Nordpool priser efter 15:05 UTC",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "05 17 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 3240,
        "wires": [
            [
                "558a4af87b57a26d"
            ]
        ]
    },
    {
        "id": "f66775c08abe85e0",
        "type": "function",
        "z": "d91b112b5683cc21",
        "name": "init timmar",
        "func": "// Code added here will be run once\n// whenever the node is started.\n// Ta bort alla timmar som är före 15:00 idag och efter 15:00 imorgon\n\n\nlet idag = new Date();\n\nlet imorrn = new Date();\n\n// add a day\nimorrn.setDate(idag.getDate() + 1);\n\nidag = idag.toISOString();\n\nimorrn = imorrn.toISOString();\n\nidag = idag.split(\"T\", 1)[0];\nimorrn = imorrn.split(\"T\", 1)[0];\n\nlet timmar = [{ timestamp: `${idag}T15:00:00.000Z`, price: 1 },\n{ timestamp: `${idag}T16:00:00.000Z`, price: 1 },\n{ timestamp: `${idag}T17:00:00.000Z`, price: 1 },\n{ timestamp: `${idag}T18:00:00.000Z`, price: 1 },\n{ timestamp: `${idag}T19:00:00.000Z`, price: 1 },\n{ timestamp: `${idag}T20:00:00.000Z`, price: 1 },\n{ timestamp: `${idag}T21:00:00.000Z`, price: 1 },\n{ timestamp: `${idag}T22:00:00.000Z`, price: 0 },\n{ timestamp: `${idag}T23:00:00.000Z`, price: 0 },\n{ timestamp: `${imorrn}T00:00:00.000Z`, price: 0 },\n{ timestamp: `${imorrn}T01:00:00.000Z`, price: 0 },\n{ timestamp: `${imorrn}T02:00:00.000Z`, price: 0 },\n{ timestamp: `${imorrn}T03:00:00.000Z`, price: 1 },\n{ timestamp: `${imorrn}T04:00:00.000Z`, price: 1 },\n{ timestamp: `${imorrn}T05:00:00.000Z`, price: 1 },\n{ timestamp: `${imorrn}T06:00:00.000Z`, price: 1 },\n{ timestamp: `${imorrn}T07:00:00.000Z`, price: 1 },\n{ timestamp: `${imorrn}T08:00:00.000Z`, price: 1 },\n{ timestamp: `${imorrn}T09:00:00.000Z`, price: 1 },\n{ timestamp: `${imorrn}T10:00:00.000Z`, price: 1 },\n{ timestamp: `${imorrn}T11:00:00.000Z`, price: 1 },\n{ timestamp: `${imorrn}T12:00:00.000Z`, price: 1 },\n{ timestamp: `${imorrn}T13:00:00.000Z`, price: 1 },\n{ timestamp: `${imorrn}T14:00:00.000Z`, price: 1 }];\n\nglobal.set(\"timmar\", timmar);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 3160,
        "wires": [
            [
                "f70c9992be5853a9",
                "852a3c6644e9e50f"
            ]
        ]
    },
    {
        "id": "f70c9992be5853a9",
        "type": "function",
        "z": "d91b112b5683cc21",
        "name": "Sortera på pris",
        "func": "// Sortera så billigaste fem timmarna är i position 0-4\n\nlet Nordpool = msg.payload;\n\nNordpool.sort((a, b) => a.price - b.price);\n\nvar tider = global.get(\"timmar\");\n\nObject.filter = (obj, predicate) =>\n    Object.fromEntries(Object.entries(obj).\n        filter(([key, value]) =>\n            predicate(value)));\n\nlet filtered =\n    Object.filter(Nordpool, Nordpool =>\n        Nordpool.timestamp.includes(tider[0].timestamp) ||\n        Nordpool.timestamp.includes(tider[1].timestamp) ||\n        Nordpool.timestamp.includes(tider[2].timestamp) ||\n        Nordpool.timestamp.includes(tider[3].timestamp) ||\n        Nordpool.timestamp.includes(tider[4].timestamp) ||\n        Nordpool.timestamp.includes(tider[5].timestamp) ||\n        Nordpool.timestamp.includes(tider[6].timestamp) ||\n        Nordpool.timestamp.includes(tider[7].timestamp) ||\n        Nordpool.timestamp.includes(tider[8].timestamp) ||\n        Nordpool.timestamp.includes(tider[9].timestamp) ||\n        Nordpool.timestamp.includes(tider[10].timestamp) ||\n        Nordpool.timestamp.includes(tider[11].timestamp) ||\n        Nordpool.timestamp.includes(tider[12].timestamp) ||\n        Nordpool.timestamp.includes(tider[13].timestamp) ||\n        Nordpool.timestamp.includes(tider[14].timestamp) ||\n        Nordpool.timestamp.includes(tider[15].timestamp) ||\n        Nordpool.timestamp.includes(tider[16].timestamp) ||\n        Nordpool.timestamp.includes(tider[17].timestamp) ||\n        Nordpool.timestamp.includes(tider[18].timestamp) ||\n        Nordpool.timestamp.includes(tider[19].timestamp) ||\n        Nordpool.timestamp.includes(tider[20].timestamp) ||\n        Nordpool.timestamp.includes(tider[21].timestamp) ||\n        Nordpool.timestamp.includes(tider[22].timestamp) ||\n        Nordpool.timestamp.includes(tider[23].timestamp)\n    );\n\nglobal.set(\"filtrerade\", filtered);\n\nmsg.payload = filtered;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 3020,
        "wires": [
            [
                "69a6b4cc60ae76c6"
            ]
        ]
    },
    {
        "id": "69a6b4cc60ae76c6",
        "type": "function",
        "z": "d91b112b5683cc21",
        "name": "Fem billigaste timmarna",
        "func": "let temp = msg.payload;\n\nlet minArray = [];\n\nlet n = 24;\n\nfor (let i = 0; i < n; i++) {\n    if (temp[i] === undefined || temp[i] === null) {\n        n++;\n    }\n    else {\n        minArray.push(temp[i]);\n    }\n}\n\nglobal.set(\"filtrerade\", minArray);\n\nconst slicedArray = minArray.slice(0, 5);\n\nglobal.set(\"VV_bered\", slicedArray)\n\nmsg.payload = minArray;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 3020,
        "wires": [
            [
                "738b50fc39d20f67"
            ]
        ]
    },
    {
        "id": "409da92d9f2fa6c3",
        "type": "catch",
        "z": "d91b112b5683cc21",
        "d": true,
        "name": "Flödet når inte Shellyn",
        "scope": null,
        "uncaught": true,
        "x": 100,
        "y": 3760,
        "wires": [
            [
                "ae013ee6637995e0"
            ]
        ]
    },
    {
        "id": "ae013ee6637995e0",
        "type": "delay",
        "z": "d91b112b5683cc21",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 3760,
        "wires": [
            [
                "96620eb2cde6f121"
            ]
        ]
    },
    {
        "id": "27540662a2a520f2",
        "type": "http request",
        "z": "d91b112b5683cc21",
        "name": "VV-beredare AV",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://192.168.1.253/relay/0?turn=off",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1000,
        "y": 3820,
        "wires": [
            []
        ]
    },
    {
        "id": "96620eb2cde6f121",
        "type": "function",
        "z": "d91b112b5683cc21",
        "name": "Hantera error meddelandet",
        "func": "let resultat;\n\nif (msg.error.source.name == \"VV-beredare AV\") {\n    resultat = false;\n}\nelse {\n    resultat = true;\n}\n\nmsg.payload = resultat;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 3760,
        "wires": [
            [
                "e62ef05e5197a3eb"
            ]
        ]
    },
    {
        "id": "e62ef05e5197a3eb",
        "type": "switch",
        "z": "d91b112b5683cc21",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 790,
        "y": 3760,
        "wires": [
            [
                "ea54fc3ceec66e87"
            ],
            [
                "27540662a2a520f2"
            ]
        ]
    },
    {
        "id": "ea54fc3ceec66e87",
        "type": "http request",
        "z": "d91b112b5683cc21",
        "name": "VV-beredare PÅ",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://192.168.1.253/relay/0?turn=on",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1000,
        "y": 3700,
        "wires": [
            []
        ]
    },
    {
        "id": "93d2035b9149e270",
        "type": "inject",
        "z": "d91b112b5683cc21",
        "d": true,
        "name": "15:04 UTC, sätt 00-05 som billigaste timmarna",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "04 17 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 2880,
        "wires": [
            [
                "b0ff3e4570842cfd"
            ]
        ]
    },
    {
        "id": "b0ff3e4570842cfd",
        "type": "function",
        "z": "d91b112b5683cc21",
        "name": "init timmar",
        "func": "// Code added here will be run once\n// whenever the node is started.\n// Ta bort alla timmar som är före 15:00 idag och efter 15:00 imorgon\n\n\nlet idag = new Date();\n\nlet imorrn = new Date();\n\n// add a day\nimorrn.setDate(idag.getDate() + 1);\n\nidag = idag.toISOString();\n\nimorrn = imorrn.toISOString();\n\nidag = idag.split(\"T\", 1)[0];\nimorrn = imorrn.split(\"T\", 1)[0];\n\nlet timmar = [{ timestamp: `${idag}T15:00:00.000Z`, price: 1 },\n{ timestamp: `${idag}T16:00:00.000Z`, price: 1 },\n{ timestamp: `${idag}T17:00:00.000Z`, price: 1 },\n{ timestamp: `${idag}T18:00:00.000Z`, price: 1 },\n{ timestamp: `${idag}T19:00:00.000Z`, price: 1 },\n{ timestamp: `${idag}T20:00:00.000Z`, price: 1 },\n{ timestamp: `${idag}T21:00:00.000Z`, price: 1 },\n{ timestamp: `${idag}T22:00:00.000Z`, price: 0 },\n{ timestamp: `${idag}T23:00:00.000Z`, price: 0 },\n{ timestamp: `${imorrn}T00:00:00.000Z`, price: 0 },\n{ timestamp: `${imorrn}T01:00:00.000Z`, price: 0 },\n{ timestamp: `${imorrn}T02:00:00.000Z`, price: 0 },\n{ timestamp: `${imorrn}T03:00:00.000Z`, price: 1 },\n{ timestamp: `${imorrn}T04:00:00.000Z`, price: 1 },\n{ timestamp: `${imorrn}T05:00:00.000Z`, price: 1 },\n{ timestamp: `${imorrn}T06:00:00.000Z`, price: 1 },\n{ timestamp: `${imorrn}T07:00:00.000Z`, price: 1 },\n{ timestamp: `${imorrn}T08:00:00.000Z`, price: 1 },\n{ timestamp: `${imorrn}T09:00:00.000Z`, price: 1 },\n{ timestamp: `${imorrn}T10:00:00.000Z`, price: 1 },\n{ timestamp: `${imorrn}T11:00:00.000Z`, price: 1 },\n{ timestamp: `${imorrn}T12:00:00.000Z`, price: 1 },\n{ timestamp: `${imorrn}T13:00:00.000Z`, price: 1 },\n{ timestamp: `${imorrn}T14:00:00.000Z`, price: 1 }];\n\nglobal.set(\"timmar\", timmar);\n\nmsg.payload = timmar;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 2960,
        "wires": [
            [
                "f70c9992be5853a9",
                "852a3c6644e9e50f"
            ]
        ]
    },
    {
        "id": "68d5092e849d5a9a",
        "type": "catch",
        "z": "d91b112b5683cc21",
        "d": true,
        "name": "Ingen data från Nordpool",
        "scope": [
            "558a4af87b57a26d"
        ],
        "uncaught": false,
        "x": 130,
        "y": 2960,
        "wires": [
            [
                "b0ff3e4570842cfd",
                "fa8bf024e1f9b2a1"
            ]
        ]
    },
    {
        "id": "fa8bf024e1f9b2a1",
        "type": "delay",
        "z": "d91b112b5683cc21",
        "d": true,
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "hours",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 260,
        "y": 3040,
        "wires": [
            [
                "558a4af87b57a26d"
            ]
        ]
    },
    {
        "id": "852a3c6644e9e50f",
        "type": "function",
        "z": "d91b112b5683cc21",
        "name": "Sortera ut 22 idag-04 imorgon",
        "func": "// Sortera så billigaste fem timmarna är i position 0-4\n\nlet Nordpool = msg.payload;\n\nNordpool.sort((a, b) => a.timestamp - b.timestamp);\n\nvar tider = global.get(\"timmar\");\n\nObject.filter = (obj, predicate) =>\n    Object.fromEntries(Object.entries(obj).\n        filter(([key, value]) =>\n            predicate(value)));\n\nlet filtered =\n    Object.filter(Nordpool, Nordpool =>\n        Nordpool.timestamp.includes(tider[7].timestamp) ||\n        Nordpool.timestamp.includes(tider[8].timestamp) ||\n        Nordpool.timestamp.includes(tider[9].timestamp) ||\n        Nordpool.timestamp.includes(tider[10].timestamp) ||\n        Nordpool.timestamp.includes(tider[11].timestamp) ||\n        Nordpool.timestamp.includes(tider[12].timestamp)\n    );\n    \n    \nvar obj = filtered\nobj = Object.keys(obj).map((key) => obj[key]);\nmsg.payload = obj\n\n    \n\nglobal.set(\"filtreradeTid\", obj);\n\nmsg.payload = obj;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 3100,
        "wires": [
            []
        ]
    },
    {
        "id": "4291dd87607e44c9",
        "type": "function",
        "z": "d91b112b5683cc21",
        "name": "Kolla om timme finns",
        "func": "// Check if VV_bered exist in filtreradeTid\n// Dvs om algoritmen valt en timme mellan 22-04 UTC behövs inte ytterligare körtid 22-04 UTC\n\nlet temp1 = global.get(\"filtreradeTid\");\nlet temp2 = global.get(\"VV_bered\");\n\n// const found = temp1.some(r=> time2.includes(r));\n\nlet finns = false; // = findOne(temp1, temp2);\n\n/**\n * @description determine if an array contains one or more items from another array.\n * @param {array} haystack the array to search.\n * @param {array} arr the array providing items to check for in the haystack.\n * @return {boolean} true|false if haystack contains at least one item from arr.\n */\n\n/*\nvar findOne = function (haystack, arr) {\n    return arr.some(function (v) {\n        return haystack.indexOf(v) >= 0;\n    });\n};\n*/\n\nfor (let i = 0; i < temp1.length; i++) {\n    for (let j = 0; j < temp2.length; j++) {\n        if (temp1[i].timestamp === temp2[j].timestamp) {\n            finns = true;\n        }\n    }\n}\n\nmsg.payload = finns;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 2900,
        "wires": [
            [
                "fcbd56781ccfbf8b"
            ]
        ]
    },
    {
        "id": "738b50fc39d20f67",
        "type": "delay",
        "z": "d91b112b5683cc21",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1260,
        "y": 3000,
        "wires": [
            [
                "4291dd87607e44c9"
            ]
        ]
    },
    {
        "id": "fcbd56781ccfbf8b",
        "type": "switch",
        "z": "d91b112b5683cc21",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1690,
        "y": 2980,
        "wires": [
            [
                "628bb18312f5ce52"
            ]
        ]
    },
    {
        "id": "628bb18312f5ce52",
        "type": "function",
        "z": "d91b112b5683cc21",
        "name": "Lägg till billigaste timmen 22-06",
        "func": "let billigaste = global.get(\"filtreradeTid\");\nlet VV_bered = global.get(\"VV_bered\");\n\n// Sortera så billigaste timmen är i position 0\n\nbilligaste.sort((a, b) => a.price - b.price);\n\n// let VV = global.get(\"VV_bered\");\n// VV.slice(0, 5, billigaste[0]);\n\nVV_bered.push(billigaste[0]);\n\nglobal.set(\"VV_bered\", VV_bered);\n\n// msg.payload = VV_bered[0];\n\nmsg.payload = billigaste[0];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 3040,
        "wires": [
            [
                "c952eb6451ebeb7e"
            ]
        ]
    },
    {
        "id": "c952eb6451ebeb7e",
        "type": "debug",
        "z": "d91b112b5683cc21",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2140,
        "y": 3120,
        "wires": []
    },
    {
        "id": "558a4af87b57a26d",
        "type": "nordpool-api-plus",
        "z": "d91b112b5683cc21",
        "d": true,
        "name": "",
        "area": "SE3",
        "currency": "SEK",
        "action": "rolling",
        "x": 340,
        "y": 3140,
        "wires": [
            [
                "f66775c08abe85e0"
            ]
        ]
    },
    {
        "id": "5add5bdcc035c23b",
        "type": "inject",
        "z": "d91b112b5683cc21",
        "d": true,
        "name": "Every Second",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 160,
        "wires": [
            [
                "4fc9743d41e3b201"
            ]
        ]
    },
    {
        "id": "d734816e3df5b90d",
        "type": "rbe",
        "z": "d91b112b5683cc21",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload",
        "x": 470,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "4fc9743d41e3b201",
        "type": "function",
        "z": "d91b112b5683cc21",
        "name": "Get Hour",
        "func": "function gethour() {\n var date = new Date();\n var hour = (\"0\"+date.getHours()).substr(-2);\n return hour;\n}\n\nvar hour = gethour();\n\nreturn { payload : hour };",
        "outputs": 1,
        "noerr": 0,
        "x": 320,
        "y": 160,
        "wires": [
            [
                "d734816e3df5b90d"
            ]
        ]
    },
    {
        "id": "46d98d3a9414db86",
        "type": "inject",
        "z": "d91b112b5683cc21",
        "name": "Ladda Nordpool priser 15:05 UTC vintertid = 16:05",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "05 16 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 230,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "0daac0851c98a6d4",
        "type": "inject",
        "z": "d91b112b5683cc21",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 580,
        "y": 520,
        "wires": [
            [
                "8b26ff1d771bd23c",
                "84fb7cd6a9ffa3f2"
            ]
        ]
    },
    {
        "id": "8b26ff1d771bd23c",
        "type": "debug",
        "z": "d91b112b5683cc21",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 520,
        "wires": []
    },
    {
        "id": "84fb7cd6a9ffa3f2",
        "type": "function",
        "z": "d91b112b5683cc21",
        "name": "function 1",
        "func": "let nu = new Date();\n\nnu.setMinutes(0, 0, 0);\n\nmsg.payload =  nu;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 620,
        "wires": [
            [
                "a7321ecbc81ba9e8"
            ]
        ]
    },
    {
        "id": "a7321ecbc81ba9e8",
        "type": "debug",
        "z": "d91b112b5683cc21",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 620,
        "wires": []
    },
    {
        "id": "be38671243915f8a",
        "type": "function",
        "z": "d91b112b5683cc21",
        "name": "Test: spara morgondagens tider i global variabel för analys",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "5731ec2036aeea0b",
        "type": "function",
        "z": "d91b112b5683cc21",
        "name": "init nordpool",
        "func": "// 1. Klipp ut så endast relevanta timmar: kl 15:00 nuvarande dag till\n// 14:00 nästa dag\n// 2. Sortera på pris.\n\n// Code added here will be run once\n// whenever the node is started.\n// Ta bort alla timmar som är före 15:00 idag och efter 15:00 imorgon\n\nlet Nordpool = msg.payload;\n\nlet idag = new Date();\n\nlet imorrn = new Date();\n\n// add a day\nimorrn.setDate(idag.getDate() + 1);\n\nidag = idag.toISOString();\n\nimorrn = imorrn.toISOString();\n\nidag = idag.split(\"T\", 1)[0];\nimorrn = imorrn.split(\"T\", 1)[0];\n\n// First initialize the Nordpool variable with default values\n// If we get not price from Nordpool, e.g. their service is down\n// We want to set night hours as the cheapest\n\nlet NordpoolTrimmed;\n\nNordpoolTrimmed = [{ timestamp: `${idag}T15`, price: 1 },\n// { timestamp: `${idag}T16`, price: 1 },\n// { timestamp: `${idag}T17`, price: 1 },\n{ timestamp: `${idag}T18`, price: 1 },\n{ timestamp: `${idag}T19`, price: 1 },\n{ timestamp: `${idag}T20`, price: 1 },\n{ timestamp: `${idag}T21`, price: 1 },\n{ timestamp: `${idag}T22`, price: 0 },\n{ timestamp: `${idag}T23`, price: 0 },\n{ timestamp: `${imorrn}T00`, price: 0 },\n{ timestamp: `${imorrn}T01`, price: 0 },\n{ timestamp: `${imorrn}T02`, price: 0 },\n{ timestamp: `${imorrn}T03`, price: 1 },\n{ timestamp: `${imorrn}T04`, price: 1 },\n{ timestamp: `${imorrn}T05`, price: 1 },\n{ timestamp: `${imorrn}T06`, price: 1 },\n{ timestamp: `${imorrn}T07`, price: 1 },\n{ timestamp: `${imorrn}T08`, price: 1 },\n{ timestamp: `${imorrn}T09`, price: 1 },\n{ timestamp: `${imorrn}T10`, price: 1 },\n{ timestamp: `${imorrn}T11`, price: 1 },\n{ timestamp: `${imorrn}T12`, price: 1 },\n{ timestamp: `${imorrn}T13`, price: 1 },\n{ timestamp: `${imorrn}T14`, price: 1 },\n{ timestamp: `${imorrn}T15`, price: 1 },\n{ timestamp: `${imorrn}T16`, price: 1 },\n{ timestamp: `${imorrn}T17`, price: 1 }];\n\nfor (let i = 0; i < Nordpool.length; i++) {\n    Nordpool[i].timestamp = Nordpool[i].timestamp.substring(0, Nordpool[i].timestamp.indexOf(':'));\n}\n\n// No need to change values above if we don't get the price from Nordpool\nif (msg.payload !== null) {\n    // sätt price till värdet i Nordpool för samma timestamp\n    \n    for (let i = 0; i < Nordpool.length; i++) {\n        for (let j = 0; j < NordpoolTrimmed.length; j++) {\n            if (Nordpool[i].timestamp === NordpoolTrimmed[j].timestamp) {\n                NordpoolTrimmed[j].price = Nordpool[i].price;\n                // break;\n            }\n        }\n    }\n\n}\n\nmsg.payload = NordpoolTrimmed;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 420,
        "wires": [
            [
                "e16bdc54b9d27ea8"
            ]
        ]
    },
    {
        "id": "e16bdc54b9d27ea8",
        "type": "function",
        "z": "d91b112b5683cc21",
        "name": "sort array",
        "func": "let Nordpool = msg.payload;\n\nNordpool.sort((a, b) => a.price - b.price); // sort funkar\n\nglobal.set(\"NordpoolTrimmed\", Nordpool);\n\nmsg.payload = Nordpool;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 420,
        "wires": [
            []
        ]
    }
]